#!/usr/bin/env python2
# -*- coding: utf-8 -*-

# based on https://stackoverflow.com/questions/17781558/xmms2-track-change-detection-for-pynotify

from __future__ import print_function
from __future__ import unicode_literals

import xmmsclient
import xmmsclient.glib
import os
import sys
import gobject
import json
import yaml
import copy
import io
import sys

def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)

def format_timedelta(secs):
    seconds = int(secs / 1000)

    secs_in_a_hour = 3600
    secs_in_a_min = 60

    hours, seconds = divmod(seconds, secs_in_a_hour)
    minutes, seconds = divmod(seconds, secs_in_a_min)

    time_fmt = "{seconds:02d}".format(**locals())

    if hours > 0:
        time_fmt = "{minutes:02d}:{time_fmt}".format(**locals())
        time_fmt = "{hours:d}:{time_fmt}".format(**locals())
    else:
        time_fmt = "{minutes:d}:{time_fmt}".format(**locals())
    return time_fmt


default_config = {
    'line': '{playback_status_icon} ({playlist_current_position}/{playlist_num_entries}) {playback_current_info[title]} - {playback_current_info[album]} - {playback_current_info[artist]}',
    #'line': '{playback_status_icon} [{playlist_current_position}/{playlist_num_entries}] {playback_current_info[tracknr]}. {playback_current_info[title]} ({playback_current_info[duration_formatted]}) - {playback_current_info[album]} ({playback_current_info[date]}) - {playback_current_info[artist]}',

    'playback_status_icons': {
        'stop': '[⏹]',
        #'play': '[▶]',  # this play icon doesn't have the same width as stop and pause (in non-monospaced fonts)
        'play': '[⏵]',  # this play icon does
        'pause': '[⏸]',

        #'stop': '⏹️',
        #'play': '▶️',
        #'pause': '⏸️',
    },
}
#eprint(repr(default_config))

info = {
    'config': copy.deepcopy(default_config),
    'config_fname': os.environ['HOME'] + '/.xmms2-tail.yaml',
    'config_fname_mtime': 0,
}

# 0 = stopped, 1 = playing, 2 = paused
playback_status_icon_name = [ 'stop', 'play', 'pause' ]

def update(name, result):
    if not result.is_error():
        global info

        value = result.value()
        #eprint(name, repr(value))
        info[name] = value

        try:
            new_mtime = os.path.getmtime(info['config_fname'])
            if new_mtime != info['config_fname_mtime']:
                #eprint("xmms2-tail: reading config file")
                with io.open(info['config_fname'], mode='r', encoding='utf-8') as stream:
                    # FIXME: merge the config file into default_config, and use that.
                    # Probably not - there's no clean, easy, idiomatic way to do that (even though there should be).
                    info['config'] = yaml.safe_load(stream)
                    info['config']['line'] = info['config']['line'].decode('utf-8')
                    #eprint(repr(info['config']))
                    info['config_fname_mtime'] = new_mtime
        except:
            eprint("xmms2-tail: unable to read config file")
            pass

        if 'playback_status' in info:
            info['playback_status_icon'] = info['config']['playback_status_icons'][playback_status_icon_name[info['playback_status']]]

        if 'playback_current_info' in info:
            if 'duration' in info['playback_current_info']:
                info['playback_current_info'][('foo', 'duration_formatted')] = format_timedelta(info['playback_current_info']['duration'])

        if name == 'playlist_current_pos':
            info['playlist_current_position'] = value["position"] + 1

        if name == 'playlist_list_entries':
            info['playlist_num_entries'] = len(value)

        if name == 'playback_current_id':
            xc.medialib_get_info(value, cb = update_for('playback_current_info'))

        if name == 'playlist_current_pos':
            xc.playlist_list_entries(cb = update_for('playlist_list_entries'))

        if name == 'playlist_list_entries':
            xc.medialib_get_info(info['playlist_list_entries'][info['playlist_current_pos']["position"]], cb = update_for('playback_current_info'))

        #eprint(repr(info))
        #eprint()
        try:
            print(info['config']['line'].format(**info).encode('utf-8'))
        except KeyError as err:
            #print(err)
            pass
        #eprint()
        sys.stdout.flush()

def update_for(name):
    return lambda r: update(name, r)

ml = gobject.MainLoop(None, False)

xc = xmmsclient.XMMS("xmms2-tail")
xc.connect()

conn = xmmsclient.glib.GLibConnector(xc)

xc.broadcast_playback_current_id(cb = update_for('playback_current_id'))
xc.broadcast_playback_status(cb = update_for('playback_status'))
xc.broadcast_playlist_current_pos(cb = update_for('playlist_current_pos'))
xc.broadcast_playlist_changed(cb = update_for('playlist_changed'))

xc.playback_current_id(cb = update_for('playback_current_id'))
xc.playlist_current_active(cb = update_for('playlist_current_active'))
xc.playlist_current_pos(cb = update_for('playlist_current_pos'))
xc.playback_status(cb = update_for('playback_status'))

ml.run()
